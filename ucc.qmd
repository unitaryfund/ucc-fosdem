---
title: "`U`nitary `C`ompiler `C`ollection"
author:
    name: nate stemen
    url: https://nates.place
    email: nate@unitary.foundation
    affiliation: Unitary Foundation
    affiliation-url: https://unitary.foundation
date: "2025-02-02"
footer: "{{< fa brands github >}} [unitaryfund.github.io/ucc-fosdem](https://unitaryfund.github.io/ucc-fosdem/)"
format:
    revealjs:
        slide-number: c/t
        preview-links: true
        logo: https://raw.githubusercontent.com/unitaryfund/unitary.foundation/refs/heads/main/src/assets/svg/logo.svg
        css: styles.css
        math: katex
---

# The <img src="images/UCC.png" alt="UCC logo" style="width: 150px; vertical-align: middle;"> team

::: {layout="[1,1,1,1,1]"}
![Jordan Sullivan](images/Jordan.png){.rounded}

![Misty Wahl](images/Misty.png){.rounded}

![Nate Stemen](images/Nate.png){.rounded}

![Will Zeng](images/Will.png){.rounded}

![Nathan Shammah](images/Nathan.png){.rounded}
:::

# What's in the name?

::: {.fragment .fade-in-then-semi-out}
`U`nitary
: $\mathsf{U}(n) := \{U \in \mathbb{C}^{n\times n} \mid U\cdot U^\dagger = \mathbb{1}\}$
:::

::: {.notes}
Or if you aren't a group theory nerd, operations that are trivially reversible: their inverse $U^{-1}$ is just their conjugate transpose $U^{\dagger}$
:::

::: {.fragment .fade-in-then-semi-out}
`C`ompiler
: Translates computer code from one language to another, usually lower-level, language.
:::


:::: {.r-stack}
::: {.callout-warning title="Terminology" .fragment .fade-in-then-out}
Somtimes the word **transpiler** is used when the abtraction level of the input and output are the same.
:::

::: {.fragment}
`C`ollection
: A group of objects or works to be seen, studied, or kept together.
:::
::::


# What is a quantum compiler?

```{mermaid}
graph LR
    A[Quantum algorithm] --> B[Quantum circuit]
    A --> Class[Classical processing]
    B -->|quantum circuit compiler| C[Optimized quantum circuit]
    C --> D[Quantum Circuit Layer]
    D --> E[Quantum Gate Layer]
    E --> F[Physical Layer]

```


# What does the ecosystem look like?

Lots of different frontends that are made by hardware providers to suit their own needs.

# What problems did/does `gcc`/`clang` enable? {auto-animate=true}

```{mermaid}
graph LR
    subgraph Frontends
        A[Clang C/C++]
        B[Rust]
        C[Swift]
        D[Custom Frontend]
    end

    E[gcc]

    subgraph Backends
        H[x86]
        I[ARM]
        J[WebAssembly]
        K[PowerPC]
    end

    A --> E
    B --> E
    C --> E
    D --> E

    E --> H
    E --> I
    E --> J
    E --> K
```

# What problems did/does `gcc`/`clang` enable? {auto-animate=true}

```{mermaid}
graph LR
    subgraph Frontends
        A[Qiskit]
        B[Cirq]
        C[OpenQASM]
        D[PyTKET]
    end

    E[ucc]

    subgraph Backends
        H[IBMQ]
        I[Quantinuum]
        J[Google]
    end

    A --> E
    B --> E
    C --> E
    D --> E

    E --> H
    E --> I
    E --> J
```

# How can I use `ucc`?

**Install**

```bash
$ pip install ucc
```

**Run!**
```python
import ucc

circuit = ...  # must be one of cirq, qiskit, PyTKET, qasm

ucc.compile(circuit)
```

# How does `ucc` perform?

![](images/results.png)

# Get involved!

:::: {.columns}

::: {.column width="50%"}

::: {.callout-note title="We want you!" style="text-align:left;!important"}

1. Test `ucc` on your workflow
2. Contribute a new compiler pass
3. Add documentation
4. Help benchmark `ucc`
:::

:::

::: {.column width="49%"}
repo: [`unitaryfund/ucc`](https://https://github.com/unitaryfund/ucc)
docs: [`ucc.readthedocs.io`](https://ucc.readthedocs.io/en/latest/)
:::

::::

# Got an idea? {.smaller}

::: {.columns}

::: {.column}
**Apply for a microgrant!**
![](images/microgrants.png)
:::

::: {.column}
**Approach:**

- $4k no strings attached
- Aimed at explorers in quantum
- Generally open-source, but also community projects
- Usually 3-6 months duration
- Short online applications

::: {.fragment}
Apply @ [**unitary.foundation/grants**]{style="color:red;"}
:::
:::

:::



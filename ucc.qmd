---
title: "`U`nitary `C`ompiler `C`ollection"
author:
    name: nate stemen
    url: https://nates.place
    email: nate@unitary.foundation
    affiliation: Unitary Foundation
    affiliation-url: https://unitary.foundation
date: "2025-02-02"
footer: "{{< fa brands github >}} [unitaryfund.github.io/ucc-fosdem](https://unitaryfund.github.io/ucc-fosdem/)"
format:
    revealjs:
        slide-number: c/t
        preview-links: true
        logo: https://raw.githubusercontent.com/unitaryfund/unitary.foundation/refs/heads/main/src/assets/svg/logo.svg
        css: styles.css
        math: katex
---

# The <img src="UCC.png" alt="Logo" style="width: 150px; vertical-align: middle;"> team

::: {layout="[1,1,1,1,1]"}
![Jordan Sullivan](Jordan.png){.rounded}

![Misty Wahl](Misty.png){.rounded}

![Nate Stemen](Nate.png){.rounded}

![Will Zeng](Will.png){.rounded}

![Nathan Shammah](Nathan.png){.rounded}
:::

# Transpilation

![](circuit.pdf)

# Transpilation

![](circuit2.svg)

# What's in the name?

Unitary
: $\mathsf{U}(n) := \{U \in \mathbb{C}^{n\times n} \mid U\cdot U^\dagger = \mathbb{1}\}$

::: {.notes}
Or if you aren't a group theory nerd, operations that are trivially reversible: their inverse $U^{-1}$ is just their conjugate transpose $U^{\dagger}$
:::

Compiler
: Translates computer code from one language to another, usually lower-level, language.

Collection
: A group of objects or works to be seen, studied, or kept together.

# What is a quantum compiler?

$$
\begin{tikzpicture}
   \node at (0,0) {$\ket{0}$};
   \draw (0.5,0) -- (2,0);
   \node at (2.5,0) {H};
   \draw (3,0) -- (5,0);
\end{tikzpicture}
$$

$$
\begin{quantikz}
\lstick{\ket{0}} & \gate{H} & \ctrl{1} & \meter{} \\
\lstick{\ket{0}} & \qw      & \targ{}  & \qw
\end{quantikz}
$$

```{mermaid}
graph LR
    A[Quantum algorithm] --> B[Quantum circuit]
    A --> Class[Classical processing]
    B -->|quantum circuit compiler| C[Optimized quantum circuit]
    C --> D[Quantum Circuit Layer]
    D --> E[Quantum Gate Layer]
    E --> F[Physical Layer]

```


# What does the ecosystem look like?

Lots of different frontends that are made by hardware providers to suit their own needs.

# What problems did/does `gcc`/`clang` enable?

```{mermaid}
graph LR
    A[Quantum algorithm] --> B[Quantum circuit]
    A --> Class[Classical processing]
    B -->|quantum circuit compiler| C[Optimized quantum circuit]
    C --> D[Quantum Circuit Layer]
    D --> E[Quantum Gate Layer]
    E --> F[Physical Layer]

```
they make it easy to compile a program to any backend.

# How can I use `ucc`?

**Install**

```bash
$ pip install ucc
```

**Run!**
```python
import ucc

circuit = ...  # must be one of cirq, qiskit, PyTKET, qasm

ucc.compile(circuit)
```

# How does `ucc` perform?

*results*

# Get involved!

:::: {.columns}

::: {.column width="50%"}

::: {.callout-note title="We want you!" style="text-align:left;!important"}

1. Test `ucc` on your workflow
2. Contribute a new compiler pass
3. Add documentation
4. Help benchmark `ucc`
:::

:::

::: {.column width="49%"}
repo: [`unitaryfund/ucc`](https://https://github.com/unitaryfund/ucc)
docs: [`ucc.readthedocs.io`](https://ucc.readthedocs.io/en/latest/)
:::

::::

# Slide 2 Title

```python
print("Code example")
```


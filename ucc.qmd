---
title: "`U`nitary `C`ompiler `C`ollection"
author:
    name: nate stemen
    url: https://nates.place
    email: nate@unitary.foundation
    affiliation: Unitary Foundation
    affiliation-url: https://unitary.foundation
date: "2025-02-02"
footer: "{{< fa brands github >}} [unitaryfund.github.io/ucc-fosdem](https://unitaryfund.github.io/ucc-fosdem/)"
format:
    revealjs:
        slide-number: c/t
        preview-links: true
        logo: https://raw.githubusercontent.com/unitaryfund/unitary.foundation/refs/heads/main/src/assets/svg/logo.svg
        css: styles.css
        math: katex
---

# The <img src="images/UCC.png" alt="UCC logo" style="width: 200px; vertical-align: middle;"> team

::: {layout="[1,1,1,1,1]"}
![Jordan Sullivan](images/Jordan.png){.rounded}

![Misty Wahl](images/Misty.png){.rounded}

![Nate Stemen](images/Nate.png){.rounded}

![Will Zeng](images/Will.png){.rounded}

![Nathan Shammah](images/Nathan.png){.rounded}
:::

# What's in the name?

::: {.fragment .fade-in-then-semi-out}
`U`nitary
: $\mathsf{U}(n) := \{U \in \mathbb{C}^{n\times n} \mid U\cdot U^\dagger = \mathbb{1}\}$
:::

::: {.notes}
Or if you aren't a group theory nerd, operations that are trivially reversible: their inverse $U^{-1}$ is just their conjugate transpose $U^{\dagger}$
:::

::: {.fragment .fade-in-then-semi-out}
`C`ompiler
: Translates computer code from one language to another, usually lower-level, language.
:::


:::: {.r-stack}
::: {.callout-warning title="Terminology" .fragment .fade-in-then-out}
Sometimes the word **transpiler** is used when the abtraction level of the input and output are the same.
:::

::: {.fragment}
`C`ollection
: A group of objects or works to be seen, studied, or kept together.
:::
::::


# What is a quantum compiler? {auto-animate=true}

:::: {.r-stack}
::: {.fragment .fade-in-then-out}
![](images/circuit1.png)
:::

::: {.fragment .fade-in-then-out}
![](images/circuit2.png)
:::

::: {.fragment .fade-in-then-out}
![](images/circuit3.png)
:::

::: {.fragment .fade-in-then-out}
![](images/circuit4.png)
:::

::: {.fragment .fade-in-then-out}
![](images/circuit5.png)
:::

::: {.fragment .fade-in-then-out}
![](images/circuit6.png)
:::

::: {.fragment .fade-in-then-out}
![](images/circuit7.png)
:::

::: {.fragment .fade-in-then-out}
![](images/circuit8.png)
:::

::: {.fragment .fade-in-then-out}
![](images/circuit9.png)
:::

::: {.fragment .fade-in-then-out}
![](images/circuit10.png)
:::

::: {.fragment .fade-in-then-out}
![](images/circuit11.png)
:::

::: {.fragment .fade-in-then-out}
![](images/circuit12.png)
:::

::: {.fragment .fade-in-then-out}
![](images/circuit13.png)
:::

::::

<!-- a placeholder image showing some examples of how a circuit is transformed through transpilation -->

::: {.notes}
a quantum compiler
:::


# What does the ecosystem look like?

::: {.fragment}
```{mermaid}
graph TD
    style google fill:#F2CCA2,stroke:#82A2A2
    style ibm fill:#F2CCA2,stroke:#82A2A2
    style quantinuum fill:#F2CCA2,stroke:#82A2A2

    style A stroke:#82A2A2,color:black
    style B stroke:#82A2A2,color:black
    style C stroke:#82A2A2,color:black
    style D stroke:#82A2A2,color:black
    style E stroke:#82A2A2,color:black
    style F stroke:#82A2A2,color:black
    style H stroke:#82A2A2,color:black

    linkStyle default stroke:#82A2A2,stroke-width:1.5

    subgraph google
        A(Cirq)
        B(Willow)
        A -->|cirq.transformers| B
    end
    subgraph ibm
        C(Qiskit)
        D(ibmq)
        C -->|qiskit.transpiler| D
    end
    subgraph quantinuum
        E(tket)
        H(tket2)
        F(H2)
        E -->|pytket.passes| F
        H --> F
    end
```
:::

# What does the ecosystem look like?

```{mermaid}
graph TD
    style google fill:#F2CCA2,stroke:#82A2A2
    style ibm fill:#F2CCA2,stroke:#82A2A2
    style quantinuum fill:#F2CCA2,stroke:#82A2A2

    style A stroke:#82A2A2,color:black
    style B stroke:#82A2A2,color:black
    style C stroke:#82A2A2,color:black
    style D stroke:#82A2A2,color:black
    style E stroke:#82A2A2,color:black
    style F stroke:#82A2A2,color:black
    style G stroke:#82A2A2,color:black
    style H stroke:#82A2A2,color:black

    linkStyle default stroke:#82A2A2,stroke-width:1.5

    subgraph google
        A(Cirq)
        B(Willow)
        A -->|cirq.transformers| B
    end
    subgraph ibm
        C(Qiskit)
        D(ibmq)
        C -->|qiskit.transpiler| D
    end
    subgraph quantinuum
        E(tket)
        H(tket2)
        F(H2)
        E -->|pytket.passes| F
        H --> F
    end
    G(QASM)
    G -.-> google
    G -.-> ibm
    G -.-> quantinuum
```


# What's so great about (classical) compilers?

::: {.columns}
::: {.column width="40%" .fragment}
A standardized **Intermediate Representation** (IR)
:::
::: {.column}

::: {.r-stack}

::: {.fragment .fade-in-then-out}
```{mermaid}
graph LR
    style Frontends fill:#F2CCA2,stroke:#F2CCA2
    style Backends fill:#F2CCA2,stroke:#F2CCA2

    style A stroke:#82A2A2,color:black
    style B stroke:#82A2A2,color:black
    style C stroke:#82A2A2,color:black
    style D stroke:#82A2A2,color:black

    style H stroke:#82A2A2,color:black
    style I stroke:#82A2A2,color:black
    style J stroke:#82A2A2,color:black
    style K stroke:#82A2A2,color:black

    linkStyle default stroke:#82A2A2,stroke-width:1.5

    classDef largeFont font-size:48px;
    class A,B,C,D,H,I,J,K largeFont

    subgraph Frontends
        A[Clang C/C++]
        B[Rust]
        C[Swift]
        D[Custom]
    end

    subgraph Backends
        direction TB
        H[x86]
        I[ARM]
        J[Wasm]
        K[PowerPC]
    end

    A -->| | H
    B -->| | H
    C -->| | H
    D -->| | H

    A -->| | I
    B -->| | I
    C -->| | I
    D -->| | I

    A -->| | J
    B -->| | J
    C -->| | J
    D -->| | J

    A -->| | K
    B -->| | K
    C -->| | K
    D -->| | K
```
:::

::: {.fragment .fade-in}
```{mermaid}
graph LR
    style Frontends fill:#F2CCA2,stroke:#F2CCA2
    style Backends fill:#F2CCA2,stroke:#F2CCA2

    style A stroke:#82A2A2,color:black
    style B stroke:#82A2A2,color:black
    style C stroke:#82A2A2,color:black
    style D stroke:#82A2A2,color:black
    style E stroke:#82A2A2,color:black

    style H stroke:#82A2A2,color:black
    style I stroke:#82A2A2,color:black
    style J stroke:#82A2A2,color:black
    style K stroke:#82A2A2,color:black

    linkStyle default stroke:#82A2A2,stroke-width:1.5
    classDef largeFont font-size:48px;
    class A,B,C,D,E,H,I,J,K largeFont

    subgraph Frontends
        A[Clang C/C++]
        B[Rust]
        C[Swift]
        D[Custom]
    end

    E[gcc]

    subgraph Backends
        H[x86]
        I[ARM]
        J[Wasm]
        K[PowerPC]
    end

    A --> E
    B --> E
    C --> E
    D --> E

    E --> H
    E --> I
    E --> J
    E --> K
```

:::

:::
:::
:::


# How can I use `ucc`?

::: {.fragment .fade-in-then-semi-out}
**Install**
```bash
$ pip install ucc
```
:::

::: {.fragment}
**Run!**
```python
import ucc

circuit = ...  # one of cirq, qiskit, PyTKET, qasm

ucc.compile(circuit)
```
:::

# Can I customize the workflow? {.smaller}

::: {.columns}
::: {.column width="40%"}
::: {.fragment .fade-in-then-semi-out}
**Default passes:**
```csv
BasisTranslator
Optimize1qGatesDecomposition
CommutativeCancellation
Collect2qBlocks
ConsolidateBlocks
UnitarySynthesis
Optimize1qGatesDecomposition
CollectCliffords
HighLevelSynthesis
```
:::
:::
::: {.column width="60%"}
::: {.fragment}
**Custom pass:**
```py
from qiskit.transpiler.basepasses import TransformationPass
from qiskit.dagcircuit import DAGCircuit
from ucc import UCCDefault1

ucc_compiler = UCCDefault1()

class KAKDecomposition(TransformationPass):
    def __init__(self):
        super().__init__()

    def run(self, dag: DAGCircuit) -> DAGCircuit:
        #  Your code here
        return better_dag

ucc_compiler.pass_manager.append(KAKDecomposition())
```
:::
:::
:::


# How does `ucc` perform?

![](images/results.png)

# Get involved!

:::: {.columns}

::: {.column width="50%"}

::: {.callout-note title="We want you!" style="text-align:left;!important"}

1. Test `ucc` on your workflow
2. Contribute a new compiler pass
3. Add documentation
4. Help benchmark `ucc`
:::

:::

::: {.column width="49%"}
repo: [`unitaryfund/ucc`](https://https://github.com/unitaryfund/ucc)
docs: [`ucc.readthedocs.io`](https://ucc.readthedocs.io/en/latest/)
:::

::::

# Got an idea? {.smaller}

::: {.columns}

::: {.column}
**Apply for a microgrant!**
![](images/microgrants.png)
:::

::: {.column}
**Approach:**

- $4k no strings attached
- Aimed at explorers in quantum
- Generally open-source, but also community projects
- Usually 3-6 months duration
- Short online applications

::: {.fragment}
::: {.callout-tip appearance="simple" style="font-size: 1.3em;"}
Apply @ <code>[**unitary.foundation/grants**]{style="color:green;"}</code>
:::
:::
:::

:::

#

:::: columns

::: {.column width="45%"}
<img src="images/uccqrcode.png" alt="UCC repo QR Code" style="width: 90%; vertical-align: middle;">
:::

::: {.column width="55%" style="text-align:right; vertical-align: middle;"}
[**Thank you!**]{.r-fit-text}
:::

::::
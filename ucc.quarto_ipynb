{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"`U`nitary `C`ompiler `C`ollection\"\n",
        "author:\n",
        "    name: nate stemen\n",
        "    url: https://nates.place\n",
        "    email: nate@unitary.foundation\n",
        "    affiliation: Unitary Foundation\n",
        "    affiliation-url: https://unitary.foundation\n",
        "date: \"2025-02-02\"\n",
        "footer: \"{{< fa brands github >}} [unitaryfund.github.io/ucc-fosdem](https://unitaryfund.github.io/ucc-fosdem/)\"\n",
        "format:\n",
        "    revealjs:\n",
        "        slide-number: c/t\n",
        "        preview-links: true\n",
        "        logo: https://raw.githubusercontent.com/unitaryfund/unitary.foundation/refs/heads/main/src/assets/svg/logo.svg\n",
        "        css: styles.css\n",
        "        math: katex\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# The <img src=\"images/UCC.png\" alt=\"UCC logo\" style=\"width: 200px; vertical-align: middle;\"> team\n",
        "\n",
        "::: {layout=\"[1,1,1,1,1]\"}\n",
        "![Jordan Sullivan](images/Jordan.png){.rounded}\n",
        "\n",
        "![Misty Wahl](images/Misty.png){.rounded}\n",
        "\n",
        "![Nate Stemen](images/Nate.png){.rounded}\n",
        "\n",
        "![Will Zeng](images/Will.png){.rounded}\n",
        "\n",
        "![Nathan Shammah](images/Nathan.png){.rounded}\n",
        ":::\n",
        "\n",
        "# What's in the name?\n",
        "\n",
        "::: {.fragment .fade-in-then-semi-out}\n",
        "`U`nitary\n",
        ": $\\mathsf{U}(n) := \\{U \\in \\mathbb{C}^{n\\times n} \\mid U\\cdot U^\\dagger = \\mathbb{1}\\}$\n",
        ":::\n",
        "\n",
        "::: {.notes}\n",
        "Or if you aren't a group theory nerd, operations that are trivially reversible: their inverse $U^{-1}$ is just their conjugate transpose $U^{\\dagger}$\n",
        ":::\n",
        "\n",
        "::: {.fragment .fade-in-then-semi-out}\n",
        "`C`ompiler\n",
        ": Translates computer code from one language to another, usually lower-level, language.\n",
        ":::\n",
        "\n",
        "\n",
        ":::: {.r-stack}\n",
        "::: {.callout-warning title=\"Terminology\" .fragment .fade-in-then-out}\n",
        "Somtimes the word **transpiler** is used when the abtraction level of the input and output are the same.\n",
        ":::\n",
        "\n",
        "::: {.fragment}\n",
        "`C`ollection\n",
        ": A group of objects or works to be seen, studied, or kept together.\n",
        ":::\n",
        "::::\n",
        "\n",
        "\n",
        "# What is a quantum compiler? {auto-animate=true}\n",
        "\n",
        "<!-- {{< placeholder 1500 500 >}} -->\n",
        "\n",
        ":::: {.r-stack}\n",
        "::: {.fragment}\n",
        "![](images/circuit1.png)\n",
        ":::\n",
        "\n",
        "::: {.fragment}\n",
        "![](images/circuit2.png)\n",
        ":::\n",
        "\n",
        "::: {.fragment}\n",
        "![](images/circuit3.png)\n",
        ":::\n",
        "\n",
        "\n",
        "::::\n",
        "\n",
        "<!-- a placeholder image showing some examples of how a circuit is transformed through transpilation -->\n",
        "\n",
        "::: {.notes}\n",
        "a quantum compiler\n",
        ":::\n",
        "\n",
        "\n",
        "# What does the ecosystem look like?\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```{mermaid}\n",
        "graph TD\n",
        "    subgraph google\n",
        "        A(Cirq)\n",
        "        B(Willow)\n",
        "        A -->|cirq.transformers| B\n",
        "    end\n",
        "    subgraph ibm\n",
        "        C(Qiskit)\n",
        "        D(ibmq)\n",
        "        C -->|qiskit.transpiler| D\n",
        "    end\n",
        "    subgraph quantinuum\n",
        "        E(tket)\n",
        "        H(tket2)\n",
        "        F(H2)\n",
        "        E -->|pytket.passes| F\n",
        "        H --> F\n",
        "    end\n",
        "    G(QASM)\n",
        "    G --> google\n",
        "    G -.-> ibm\n",
        "    G --> quantinuum\n",
        "\n",
        "    %% C --> G --> A\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "Lots of different frontends that are made by hardware providers to suit their own needs.\n",
        "\n",
        "# What's so great about (classical) compilers?\n",
        "\n",
        "::: {.columns}\n",
        "::: {.column width=\"40%\" .fragment}\n",
        "A standardized **Intermediate Representation** (IR)\n",
        ":::\n",
        "::: {.column}\n",
        "\n",
        "::: {.r-stack}\n",
        "\n",
        "::: {.fragment .fade-in-then-out}\n",
        "\n",
        "\n",
        "\n",
        "```{mermaid}\n",
        "graph LR\n",
        "    style Frontends fill:#F2CCA2,stroke:#F2CCA2\n",
        "    style Backends fill:#F2CCA2,stroke:#F2CCA2\n",
        "\n",
        "    style A stroke:#82A2A2,color:black\n",
        "    style B stroke:#82A2A2,color:black\n",
        "    style C stroke:#82A2A2,color:black\n",
        "    style D stroke:#82A2A2,color:black\n",
        "\n",
        "    style H stroke:#82A2A2,color:black\n",
        "    style I stroke:#82A2A2,color:black\n",
        "    style J stroke:#82A2A2,color:black\n",
        "    style K stroke:#82A2A2,color:black\n",
        "\n",
        "    linkStyle default stroke:#82A2A2,stroke-width:1.5\n",
        "\n",
        "    subgraph Frontends\n",
        "        A[Clang C/C++]\n",
        "        B[Rust]\n",
        "        C[Swift]\n",
        "        D[Custom Frontend]\n",
        "    end\n",
        "\n",
        "    subgraph Backends\n",
        "        direction TB\n",
        "        H[x86]\n",
        "        I[ARM]\n",
        "        J[WebAssembly]\n",
        "        K[PowerPC]\n",
        "    end\n",
        "\n",
        "    A -->| | H\n",
        "    B -->| | H\n",
        "    C -->| | H\n",
        "    D -->| | H\n",
        "\n",
        "    A -->| | I\n",
        "    B -->| | I\n",
        "    C -->| | I\n",
        "    D -->| | I\n",
        "\n",
        "    A -->| | J\n",
        "    B -->| | J\n",
        "    C -->| | J\n",
        "    D -->| | J\n",
        "\n",
        "    A -->| | K\n",
        "    B -->| | K\n",
        "    C -->| | K\n",
        "    D -->| | K\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        ":::\n",
        "\n",
        "::: {.fragment .fade-in}\n",
        "\n",
        "\n",
        "\n",
        "```{mermaid}\n",
        "graph LR\n",
        "    subgraph Frontends\n",
        "        A[Clang C/C++]\n",
        "        B[Rust]\n",
        "        C[Swift]\n",
        "        D[Custom Frontend]\n",
        "    end\n",
        "\n",
        "    E[gcc]\n",
        "\n",
        "    subgraph Backends\n",
        "        H[x86]\n",
        "        I[ARM]\n",
        "        J[WebAssembly]\n",
        "        K[PowerPC]\n",
        "    end\n",
        "\n",
        "    A --> E\n",
        "    B --> E\n",
        "    C --> E\n",
        "    D --> E\n",
        "\n",
        "    E --> H\n",
        "    E --> I\n",
        "    E --> J\n",
        "    E --> K\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        ":::\n",
        "\n",
        ":::\n",
        ":::\n",
        ":::\n",
        "\n",
        "<!-- TODO: mermaid diagram is almost unreadable -->\n",
        "\n",
        "# How can I use `ucc`?\n",
        "\n",
        "**Install**\n",
        "```bash\n",
        "$ pip install ucc\n",
        "```\n",
        "\n",
        "**Run!**\n",
        "```python\n",
        "import ucc\n",
        "\n",
        "circuit = ...  # one of cirq, qiskit, PyTKET, qasm\n",
        "\n",
        "ucc.compile(circuit)\n",
        "```\n",
        "\n",
        "# Can I customize the workflow? {.smaller}\n",
        "\n",
        "::: {.columns}\n",
        "::: {.column width=\"40%\"}\n",
        "**Default passes:**\n",
        "```csv\n",
        "BasisTranslator\n",
        "Optimize1qGatesDecomposition\n",
        "CommutativeCancellation\n",
        "Collect2qBlocks\n",
        "ConsolidateBlocks\n",
        "UnitarySynthesis\n",
        "Optimize1qGatesDecomposition\n",
        "CollectCliffords\n",
        "HighLevelSynthesis\n",
        "```\n",
        ":::\n",
        "::: {.column width=\"60%\"}\n",
        "\n",
        "\n",
        "\n",
        "```{py eval=FALSE}\n",
        "from qiskit.transpiler.basepasses import TransformationPass\n",
        "from qiskit.dagcircuit import DAGCircuit\n",
        "from ucc import UCCDefault1\n",
        "\n",
        "ucc_compiler = UCCDefault1()\n",
        "\n",
        "class KAKDecomposition(TransformationPass):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "\n",
        "    def run(self, dag: DAGCircuit) -> DAGCircuit:\n",
        "        #  Your code here\n",
        "        return better_dag\n",
        "\n",
        "ucc_compiler.pass_manager.append(KAKDecomposition())\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        ":::\n",
        ":::\n",
        "\n",
        "\n",
        "# How does `ucc` perform?\n",
        "\n",
        "![](images/results.png)\n",
        "\n",
        "# Get involved!\n",
        "\n",
        ":::: {.columns}\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "::: {.callout-note title=\"We want you!\" style=\"text-align:left;!important\"}\n",
        "\n",
        "1. Test `ucc` on your workflow\n",
        "2. Contribute a new compiler pass\n",
        "3. Add documentation\n",
        "4. Help benchmark `ucc`\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "::: {.column width=\"49%\"}\n",
        "repo: [`unitaryfund/ucc`](https://https://github.com/unitaryfund/ucc)\n",
        "docs: [`ucc.readthedocs.io`](https://ucc.readthedocs.io/en/latest/)\n",
        ":::\n",
        "\n",
        "::::\n",
        "\n",
        "# Got an idea? {.smaller}\n",
        "\n",
        "::: {.columns}\n",
        "\n",
        "::: {.column}\n",
        "**Apply for a microgrant!**\n",
        "![](images/microgrants.png)\n",
        ":::\n",
        "\n",
        "::: {.column}\n",
        "**Approach:**\n",
        "\n",
        "- $4k no strings attached\n",
        "- Aimed at explorers in quantum\n",
        "- Generally open-source, but also community projects\n",
        "- Usually 3-6 months duration\n",
        "- Short online applications\n",
        "\n",
        "::: {.fragment}\n",
        "Apply @ [**unitary.foundation/grants**]{style=\"color:red;\"}\n",
        ":::\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "#\n",
        "\n",
        ":::: columns\n",
        "\n",
        "::: {.column width=\"45%\"}\n",
        "<img src=\"images/uccqrcode.png\" alt=\"UCC repo QR Code\" style=\"width: 90%; vertical-align: middle;\">\n",
        ":::\n",
        "\n",
        "::: {.column width=\"55%\" style=\"text-align:right; vertical-align: middle;\"}\n",
        "[**Thank you!**]{.r-fit-text}\n",
        ":::\n",
        "\n",
        "::::"
      ],
      "id": "136f6fa3"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}